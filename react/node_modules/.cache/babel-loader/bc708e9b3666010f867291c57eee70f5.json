{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Aleksander\\\\Documents\\\\Uczelnia\\\\kiedy-kolos\\\\react\\\\src\\\\components\\\\Callendar.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport CallendarCard from \"./CallendarCard\";\nimport AddEventPanel from \"./AddEventPanel\";\nimport \"./../App.css\";\nimport { setDate } from \"../actions\";\n\nconst Callendar = () => {\n  _s();\n\n  const API_URL = `http://aleksanderblaszkiewicz.pl/kiedykolos/get_events.php`;\n  const [events, setEvents] = useState([]);\n  const [days, setDays] = useState([]);\n  const [month, setMonth] = useState(12);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    initializeDays();\n    getEvents();\n    dispatch(setDate(\"2020-12-01\"));\n  }, []);\n\n  const getEvents = async () => {\n    const response = await fetch(API_URL);\n    const data = await response.json();\n    setEvents(data);\n    console.log(data);\n  };\n\n  const initializeDays = () => {\n    let days = new Array(31);\n\n    for (let i = 0; i < 31; i++) {\n      days[i] = i + 1;\n    }\n\n    setDays(days);\n  };\n\n  const getEventsForDay = day => {\n    let specificEvents = [];\n    events.forEach(event => {\n      if (event.date.slice(event.date.length - 2, event.date.length) == day) {\n        specificEvents.push(event);\n      }\n    });\n    return specificEvents;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"callendar\",\n    children: [/*#__PURE__*/_jsxDEV(AddEventPanel, {\n      refreshEvents: getEvents\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), days.map(day => /*#__PURE__*/_jsxDEV(CallendarCard, {\n      day: day,\n      month: month,\n      year: \"2020\",\n      events: getEventsForDay(day)\n    }, day, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Callendar, \"X9xfV9jhB+1ei1qn70i6cDcmGbw=\", false, function () {\n  return [useDispatch];\n});\n\n_c = Callendar;\nexport default Callendar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Callendar\");","map":{"version":3,"sources":["C:/Users/Aleksander/Documents/Uczelnia/kiedy-kolos/react/src/components/Callendar.js"],"names":["React","useEffect","useState","useDispatch","CallendarCard","AddEventPanel","setDate","Callendar","API_URL","events","setEvents","days","setDays","month","setMonth","dispatch","initializeDays","getEvents","response","fetch","data","json","console","log","Array","i","getEventsForDay","day","specificEvents","forEach","event","date","slice","length","push","map"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAO,cAAP;AACA,SAASC,OAAT,QAAwB,YAAxB;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AACpB,QAAMC,OAAO,GAAI,4DAAjB;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACS,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAMa,QAAQ,GAAGZ,WAAW,EAA5B;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACZe,IAAAA,cAAc;AACdC,IAAAA,SAAS;AACTF,IAAAA,QAAQ,CAACT,OAAO,CAAC,YAAD,CAAR,CAAR;AACH,GAJQ,EAIN,EAJM,CAAT;;AAMA,QAAMW,SAAS,GAAG,YAAY;AAC1B,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACX,OAAD,CAA5B;AACA,UAAMY,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACAX,IAAAA,SAAS,CAACU,IAAD,CAAT;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACH,GALD;;AAOA,QAAMJ,cAAc,GAAG,MAAM;AACzB,QAAIL,IAAI,GAAG,IAAIa,KAAJ,CAAU,EAAV,CAAX;;AACA,SAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC,EAAf,EAAmBA,CAAC,EAApB,EAAwB;AACpBd,MAAAA,IAAI,CAACc,CAAD,CAAJ,GAAUA,CAAC,GAAC,CAAZ;AACH;;AACDb,IAAAA,OAAO,CAACD,IAAD,CAAP;AACH,GAND;;AAQA,QAAMe,eAAe,GAAIC,GAAD,IAAS;AAC7B,QAAIC,cAAc,GAAG,EAArB;AACAnB,IAAAA,MAAM,CAACoB,OAAP,CAAeC,KAAK,IAAI;AACpB,UAAGA,KAAK,CAACC,IAAN,CAAWC,KAAX,CAAiBF,KAAK,CAACC,IAAN,CAAWE,MAAX,GAAkB,CAAnC,EAAqCH,KAAK,CAACC,IAAN,CAAWE,MAAhD,KAA2DN,GAA9D,EAAmE;AAC/DC,QAAAA,cAAc,CAACM,IAAf,CAAoBJ,KAApB;AACH;AACJ,KAJD;AAKA,WAAOF,cAAP;AACH,GARD;;AAUA,sBACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BACI,QAAC,aAAD;AAAe,MAAA,aAAa,EAAEX;AAA9B;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA;AAAA;AAAA;AAAA,YAFJ,EAGKN,IAAI,CAACwB,GAAL,CAASR,GAAG,iBACT,QAAC,aAAD;AAAyB,MAAA,GAAG,EAAEA,GAA9B;AAAmC,MAAA,KAAK,EAAEd,KAA1C;AAAiD,MAAA,IAAI,EAAC,MAAtD;AAA6D,MAAA,MAAM,EAAEa,eAAe,CAACC,GAAD;AAApF,OAAoBA,GAApB;AAAA;AAAA;AAAA;AAAA,YADH,CAHL;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH,CAhDD;;GAAMpB,S;UAKeJ,W;;;KALfI,S;AAkDN,eAAeA,SAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport CallendarCard from \"./CallendarCard\";\r\nimport AddEventPanel from \"./AddEventPanel\";\r\nimport \"./../App.css\"\r\nimport { setDate } from \"../actions\";\r\n\r\nconst Callendar = () => {\r\n    const API_URL = `http://aleksanderblaszkiewicz.pl/kiedykolos/get_events.php`;\r\n    const [events, setEvents] = useState([]);\r\n    const [days, setDays] = useState([]);\r\n    const [month, setMonth] = useState(12);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        initializeDays();\r\n        getEvents();\r\n        dispatch(setDate(\"2020-12-01\"));\r\n    }, []);\r\n\r\n    const getEvents = async () => {\r\n        const response = await fetch(API_URL);\r\n        const data = await response.json();\r\n        setEvents(data);\r\n        console.log(data);\r\n    }\r\n\r\n    const initializeDays = () => {\r\n        let days = new Array(31);\r\n        for(let i=0; i<31; i++) {\r\n            days[i] = i+1;\r\n        }\r\n        setDays(days);\r\n    }\r\n\r\n    const getEventsForDay = (day) => {\r\n        let specificEvents = [];\r\n        events.forEach(event => {\r\n            if(event.date.slice(event.date.length-2,event.date.length) == day) {\r\n                specificEvents.push(event);\r\n            }\r\n        });\r\n        return specificEvents;\r\n    }\r\n\r\n    return (\r\n        <div className=\"callendar\">\r\n            <AddEventPanel refreshEvents={getEvents}/>\r\n            <br />\r\n            {days.map(day => (\r\n                <CallendarCard key={day} day={day} month={month} year=\"2020\" events={getEventsForDay(day)}/>\r\n            ))}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Callendar;"]},"metadata":{},"sourceType":"module"}