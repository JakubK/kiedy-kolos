{"ast":null,"code":"var request = require('./request');\n\nvar React = require('react');\n\nvar PropTypes = React.PropTypes;\nvar Ajax = React.createClass({\n  propTypes: {\n    onResponse: PropTypes.func,\n    // Fired whenever a response or an error is received.\n    url: PropTypes.string,\n    method: PropTypes.string,\n    // The HTTP method to use such as 'GET', 'POST', 'PUT', or 'DELETE'. Default is 'GET'.\n    params: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n    // Parameters to send to the specified URL, as JSON.\n    body: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n    // Optional raw body content to send when method === \"POST\".\n    headers: PropTypes.object,\n    // HTTP request headers to send.\n    type: PropTypes.string,\n    accept: PropTypes.string,\n    timeout: PropTypes.number,\n    withCredentials: PropTypes.bool // Set the withCredentials flag on the request.\n\n  },\n  getDefaultProps: function () {\n    return {\n      method: 'GET',\n      onResponse: function () {}\n    };\n  },\n  request: function () {\n    var url = this.props.url;\n    var method = this.props.method.toLowerCase();\n    var params = this.props.params;\n    var body = this.props.body;\n    var headers = this.props.headers;\n    var type = this.props.type;\n    var accept = this.props.accept;\n    var withCredentials = this.props.withCredentials;\n    var timeout = this.props.timeout;\n    var handler = this.props.onResponse;\n    var req = request(method, url);\n\n    if (withCredentials) {\n      req.withCredentials();\n    }\n\n    if (type) {\n      req.type(type);\n    }\n\n    if (headers) {\n      req.set(headers);\n    }\n\n    if (accept) {\n      req.accept(accept);\n    }\n\n    if (params) {\n      req.query(params);\n    }\n\n    if (body) {\n      req.send(body);\n    }\n\n    if (timeout) {\n      req.timeout(timeout);\n    }\n\n    return req.end(handler);\n  },\n  // Invoked immediately before mounting occurs.\n  componentWillMount: function () {\n    this.request();\n  },\n  render: function () {\n    return null;\n  }\n});\nmodule.exports = Ajax;","map":{"version":3,"sources":["C:/Users/Aleksander/Documents/Uczelnia/SPS/REACT/callendar/node_modules/react-ajax/src/Ajax.js"],"names":["request","require","React","PropTypes","Ajax","createClass","propTypes","onResponse","func","url","string","method","params","oneOfType","object","body","headers","type","accept","timeout","number","withCredentials","bool","getDefaultProps","props","toLowerCase","handler","req","set","query","send","end","componentWillMount","render","module","exports"],"mappings":"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","sourcesContent":["var request = require('./request');\nvar React = require('react');\nvar PropTypes = React.PropTypes;\n\nvar Ajax = React.createClass({\n    propTypes: {\n        onResponse: PropTypes.func, // Fired whenever a response or an error is received.\n        url: PropTypes.string,\n        method: PropTypes.string, // The HTTP method to use such as 'GET', 'POST', 'PUT', or 'DELETE'. Default is 'GET'.\n        params: PropTypes.oneOfType([\n            PropTypes.object,\n            PropTypes.string\n        ]), // Parameters to send to the specified URL, as JSON.\n        body: PropTypes.oneOfType([\n            PropTypes.object,\n            PropTypes.string\n        ]), // Optional raw body content to send when method === \"POST\".\n        headers: PropTypes.object, // HTTP request headers to send.\n        type: PropTypes.string,\n        accept: PropTypes.string,\n        timeout: PropTypes.number,\n        withCredentials: PropTypes.bool // Set the withCredentials flag on the request.\n    },\n\n    getDefaultProps: function(){\n        return {\n            method: 'GET',\n            onResponse: function(){}\n        };\n    },\n\n    request: function(){\n        var url = this.props.url;\n        var method = this.props.method.toLowerCase();\n        var params = this.props.params;\n        var body = this.props.body;\n        var headers = this.props.headers;\n        var type = this.props.type;\n        var accept = this.props.accept;\n        var withCredentials = this.props.withCredentials;\n        var timeout = this.props.timeout;\n        var handler = this.props.onResponse;\n\n        var req = request(method, url);\n        if(withCredentials){\n            req.withCredentials()\n        }\n        if(type){\n            req.type(type)\n        }\n        if(headers){\n            req.set(headers)\n        }\n        if(accept){\n            req.accept(accept);\n        }\n        if(params){\n            req.query(params)\n        }\n        if(body){\n            req.send(body)\n        }\n        if(timeout){\n            req.timeout(timeout)\n        }\n        return req.end(handler);\n    },\n\n    // Invoked immediately before mounting occurs.\n    componentWillMount: function () {\n        this.request();\n    },\n\n    render: function () {\n        return null\n    }\n});\n\nmodule.exports = Ajax;"]},"metadata":{},"sourceType":"script"}