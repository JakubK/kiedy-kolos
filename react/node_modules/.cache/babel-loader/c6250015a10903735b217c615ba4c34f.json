{"ast":null,"code":"/**\n * Copyright (c) 2014 TJ Holowaychuk <tj@vision-media.ca>\n */\n\n/**\n * Module dependencies.\n */\nvar Emitter = require('./emitter');\n\nvar reduce = require('./reduce');\n/**\n * Root reference for iframes.\n */\n\n\nvar root = 'undefined' == typeof window ? this : window;\n/**\n * Noop.\n */\n\nfunction noop() {}\n\n;\n/**\n * Check if `obj` is a host object,\n * we don't want to serialize these :)\n *\n * TODO: future proof, move to compoent land\n *\n * @param {Object} obj\n * @return {Boolean}\n * @api private\n */\n\nfunction isHost(obj) {\n  var str = {}.toString.call(obj);\n\n  switch (str) {\n    case '[object File]':\n    case '[object Blob]':\n    case '[object FormData]':\n      return true;\n\n    default:\n      return false;\n  }\n}\n/**\n * Determine XHR.\n */\n\n\nfunction getXHR() {\n  if (root.XMLHttpRequest && ('file:' != root.location.protocol || !root.ActiveXObject)) {\n    return new XMLHttpRequest();\n  } else {\n    try {\n      return new ActiveXObject('Microsoft.XMLHTTP');\n    } catch (e) {}\n\n    try {\n      return new ActiveXObject('Msxml2.XMLHTTP.6.0');\n    } catch (e) {}\n\n    try {\n      return new ActiveXObject('Msxml2.XMLHTTP.3.0');\n    } catch (e) {}\n\n    try {\n      return new ActiveXObject('Msxml2.XMLHTTP');\n    } catch (e) {}\n  }\n\n  return false;\n}\n/**\n * Removes leading and trailing whitespace, added to support IE.\n *\n * @param {String} s\n * @return {String}\n * @api private\n */\n\n\nvar trim = ''.trim ? function (s) {\n  return s.trim();\n} : function (s) {\n  return s.replace(/(^\\s*|\\s*$)/g, '');\n};\n/**\n * Check if `obj` is an object.\n *\n * @param {Object} obj\n * @return {Boolean}\n * @api private\n */\n\nfunction isObject(obj) {\n  return obj === Object(obj);\n}\n/**\n * Serialize the given `obj`.\n *\n * @param {Object} obj\n * @return {String}\n * @api private\n */\n\n\nfunction serialize(obj) {\n  if (!isObject(obj)) return obj;\n  var pairs = [];\n\n  for (var key in obj) {\n    if (null != obj[key]) {\n      pairs.push(encodeURIComponent(key) + '=' + encodeURIComponent(obj[key]));\n    }\n  }\n\n  return pairs.join('&');\n}\n/**\n * Expose serialization method.\n */\n\n\nrequest.serializeObject = serialize;\n/**\n * Parse the given x-www-form-urlencoded `str`.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nfunction parseString(str) {\n  var obj = {};\n  var pairs = str.split('&');\n  var parts;\n  var pair;\n\n  for (var i = 0, len = pairs.length; i < len; ++i) {\n    pair = pairs[i];\n    parts = pair.split('=');\n    obj[decodeURIComponent(parts[0])] = decodeURIComponent(parts[1]);\n  }\n\n  return obj;\n}\n/**\n * Expose parser.\n */\n\n\nrequest.parseString = parseString;\n/**\n * Default MIME type map.\n *\n *     superagent.types.xml = 'application/xml';\n *\n */\n\nrequest.types = {\n  html: 'text/html',\n  json: 'application/json',\n  xml: 'application/xml',\n  urlencoded: 'application/x-www-form-urlencoded',\n  'form': 'application/x-www-form-urlencoded',\n  'form-data': 'application/x-www-form-urlencoded'\n};\n/**\n * Default serialization map.\n *\n *     superagent.serialize['application/xml'] = function(obj){\n *       return 'generated xml here';\n *     };\n *\n */\n\nrequest.serialize = {\n  'application/x-www-form-urlencoded': serialize,\n  'application/json': JSON.stringify\n};\n/**\n * Default parsers.\n *\n *     superagent.parse['application/xml'] = function(str){\n  *       return { object parsed from str };\n  *     };\n *\n */\n\nrequest.parse = {\n  'application/x-www-form-urlencoded': parseString,\n  'application/json': JSON.parse\n};\n/**\n * Parse the given header `str` into\n * an object containing the mapped fields.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nfunction parseHeader(str) {\n  var lines = str.split(/\\r?\\n/);\n  var fields = {};\n  var index;\n  var line;\n  var field;\n  var val;\n  lines.pop(); // trailing CRLF\n\n  for (var i = 0, len = lines.length; i < len; ++i) {\n    line = lines[i];\n    index = line.indexOf(':');\n    field = line.slice(0, index).toLowerCase();\n    val = trim(line.slice(index + 1));\n    fields[field] = val;\n  }\n\n  return fields;\n}\n/**\n * Return the mime type for the given `str`.\n *\n * @param {String} str\n * @return {String}\n * @api private\n */\n\n\nfunction type(str) {\n  return str.split(/ *; */).shift();\n}\n\n;\n/**\n * Return header field parameters.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nfunction params(str) {\n  return reduce(str.split(/ *; */), function (obj, str) {\n    var parts = str.split(/ *= */),\n        key = parts.shift(),\n        val = parts.shift();\n    if (key && val) obj[key] = val;\n    return obj;\n  }, {});\n}\n\n;\n/**\n * Initialize a new `Response` with the given `xhr`.\n *\n *  - set flags (.ok, .error, etc)\n *  - parse header\n *\n * Examples:\n *\n *  Aliasing `superagent` as `request` is nice:\n *\n *      request = superagent;\n *\n *  We can use the promise-like API, or pass callbacks:\n *\n *      request.get('/').end(function(res){});\n *      request.get('/', function(res){});\n *\n *  Sending data can be chained:\n *\n *      request\n *        .post('/user')\n *        .send({ name: 'tj' })\n *        .end(function(res){});\n *\n *  Or passed to `.send()`:\n *\n *      request\n *        .post('/user')\n *        .send({ name: 'tj' }, function(res){});\n *\n *  Or passed to `.post()`:\n *\n *      request\n *        .post('/user', { name: 'tj' })\n *        .end(function(res){});\n *\n * Or further reduced to a single call for simple cases:\n *\n *      request\n *        .post('/user', { name: 'tj' }, function(res){});\n *\n * @param {XMLHTTPRequest} xhr\n * @param {Object} options\n * @api private\n */\n\nfunction Response(req, options) {\n  options = options || {};\n  this.req = req;\n  this.xhr = this.req.xhr;\n  this.text = this.req.method != 'HEAD' ? this.xhr.responseText : null;\n  this.setStatusProperties(this.xhr.status);\n  this.header = this.headers = parseHeader(this.xhr.getAllResponseHeaders()); // getAllResponseHeaders sometimes falsely returns \"\" for CORS requests, but\n  // getResponseHeader still works. so we get content-type even if getting\n  // other headers fails.\n\n  this.header['content-type'] = this.xhr.getResponseHeader('content-type');\n  this.setHeaderProperties(this.header);\n  this.body = this.req.method != 'HEAD' ? this.parseBody(this.text) : null;\n}\n/**\n * Get case-insensitive `field` value.\n *\n * @param {String} field\n * @return {String}\n * @api public\n */\n\n\nResponse.prototype.get = function (field) {\n  return this.header[field.toLowerCase()];\n};\n/**\n * Set header related properties:\n *\n *   - `.type` the content type without params\n *\n * A response of \"Content-Type: text/plain; charset=utf-8\"\n * will provide you with a `.type` of \"text/plain\".\n *\n * @param {Object} header\n * @api private\n */\n\n\nResponse.prototype.setHeaderProperties = function (header) {\n  // content-type\n  var ct = this.header['content-type'] || '';\n  this.type = type(ct); // params\n\n  var obj = params(ct);\n\n  for (var key in obj) this[key] = obj[key];\n};\n/**\n * Parse the given body `str`.\n *\n * Used for auto-parsing of bodies. Parsers\n * are defined on the `superagent.parse` object.\n *\n * @param {String} str\n * @return {Mixed}\n * @api private\n */\n\n\nResponse.prototype.parseBody = function (str) {\n  var parse = request.parse[this.type];\n  return parse && str && str.length ? parse(str) : null;\n};\n/**\n * Set flags such as `.ok` based on `status`.\n *\n * For example a 2xx response will give you a `.ok` of __true__\n * whereas 5xx will be __false__ and `.error` will be __true__. The\n * `.clientError` and `.serverError` are also available to be more\n * specific, and `.statusType` is the class of error ranging from 1..5\n * sometimes useful for mapping respond colors etc.\n *\n * \"sugar\" properties are also defined for common cases. Currently providing:\n *\n *   - .noContent\n *   - .badRequest\n *   - .unauthorized\n *   - .notAcceptable\n *   - .notFound\n *\n * @param {Number} status\n * @api private\n */\n\n\nResponse.prototype.setStatusProperties = function (status) {\n  var type = status / 100 | 0; // status / class\n\n  this.status = status;\n  this.statusType = type; // basics\n\n  this.info = 1 == type;\n  this.ok = 2 == type;\n  this.clientError = 4 == type;\n  this.serverError = 5 == type;\n  this.error = 4 == type || 5 == type ? this.toError() : false; // sugar\n\n  this.accepted = 202 == status;\n  this.noContent = 204 == status || 1223 == status;\n  this.badRequest = 400 == status;\n  this.unauthorized = 401 == status;\n  this.notAcceptable = 406 == status;\n  this.notFound = 404 == status;\n  this.forbidden = 403 == status;\n};\n/**\n * Return an `Error` representative of this response.\n *\n * @return {Error}\n * @api public\n */\n\n\nResponse.prototype.toError = function () {\n  var req = this.req;\n  var method = req.method;\n  var url = req.url;\n  var msg = 'cannot ' + method + ' ' + url + ' (' + this.status + ')';\n  var err = new Error(msg);\n  err.status = this.status;\n  err.method = method;\n  err.url = url;\n  return err;\n};\n/**\n * Expose `Response`.\n */\n\n\nrequest.Response = Response;\n/**\n * Initialize a new `Request` with the given `method` and `url`.\n *\n * @param {String} method\n * @param {String} url\n * @api public\n */\n\nfunction Request(method, url) {\n  var self = this;\n  Emitter.call(this);\n  this._query = this._query || [];\n  this.method = method;\n  this.url = url;\n  this.header = {};\n  this._header = {};\n  this.on('end', function () {\n    var err = null;\n    var res = null;\n\n    try {\n      res = new Response(self);\n    } catch (e) {\n      err = new Error('Parser is unable to parse the response');\n      err.parse = true;\n      err.original = e;\n    }\n\n    if (res) {\n      self.emit('response', res);\n    }\n\n    self.callback(err, res);\n  });\n}\n/**\n * Mixin `Emitter`.\n */\n\n\nEmitter(Request.prototype);\n/**\n * Allow for extension\n */\n\nRequest.prototype.use = function (fn) {\n  fn(this);\n  return this;\n};\n/**\n * Set timeout to `ms`.\n *\n * @param {Number} ms\n * @return {Request} for chaining\n * @api public\n */\n\n\nRequest.prototype.timeout = function (ms) {\n  this._timeout = ms;\n  return this;\n};\n/**\n * Clear previous timeout.\n *\n * @return {Request} for chaining\n * @api public\n */\n\n\nRequest.prototype.clearTimeout = function () {\n  this._timeout = 0;\n  clearTimeout(this._timer);\n  return this;\n};\n/**\n * Abort the request, and clear potential timeout.\n *\n * @return {Request}\n * @api public\n */\n\n\nRequest.prototype.abort = function () {\n  if (this.aborted) return;\n  this.aborted = true;\n  this.xhr.abort();\n  this.clearTimeout();\n  this.emit('abort');\n  return this;\n};\n/**\n * Set header `field` to `val`, or multiple fields with one object.\n *\n * Examples:\n *\n *      req.get('/')\n *        .set('Accept', 'application/json')\n *        .set('X-API-Key', 'foobar')\n *        .end(callback);\n *\n *      req.get('/')\n *        .set({ Accept: 'application/json', 'X-API-Key': 'foobar' })\n *        .end(callback);\n *\n * @param {String|Object} field\n * @param {String} val\n * @return {Request} for chaining\n * @api public\n */\n\n\nRequest.prototype.set = function (field, val) {\n  if (isObject(field)) {\n    for (var key in field) {\n      this.set(key, field[key]);\n    }\n\n    return this;\n  }\n\n  this._header[field.toLowerCase()] = val;\n  this.header[field] = val;\n  return this;\n};\n/**\n * Remove header `field`.\n *\n * Example:\n *\n *      req.get('/')\n *        .unset('User-Agent')\n *        .end(callback);\n *\n * @param {String} field\n * @return {Request} for chaining\n * @api public\n */\n\n\nRequest.prototype.unset = function (field) {\n  delete this._header[field.toLowerCase()];\n  delete this.header[field];\n  return this;\n};\n/**\n * Get case-insensitive header `field` value.\n *\n * @param {String} field\n * @return {String}\n * @api private\n */\n\n\nRequest.prototype.getHeader = function (field) {\n  return this._header[field.toLowerCase()];\n};\n/**\n * Set Content-Type to `type`, mapping values from `request.types`.\n *\n * Examples:\n *\n *      superagent.types.xml = 'application/xml';\n *\n *      request.post('/')\n *        .type('xml')\n *        .send(xmlstring)\n *        .end(callback);\n *\n *      request.post('/')\n *        .type('application/xml')\n *        .send(xmlstring)\n *        .end(callback);\n *\n * @param {String} type\n * @return {Request} for chaining\n * @api public\n */\n\n\nRequest.prototype.type = function (type) {\n  this.set('Content-Type', request.types[type] || type);\n  return this;\n};\n/**\n * Set Accept to `type`, mapping values from `request.types`.\n *\n * Examples:\n *\n *      superagent.types.json = 'application/json';\n *\n *      request.get('/agent')\n *        .accept('json')\n *        .end(callback);\n *\n *      request.get('/agent')\n *        .accept('application/json')\n *        .end(callback);\n *\n * @param {String} accept\n * @return {Request} for chaining\n * @api public\n */\n\n\nRequest.prototype.accept = function (type) {\n  this.set('Accept', request.types[type] || type);\n  return this;\n};\n/**\n * Set Authorization field value with `user` and `pass`.\n *\n * @param {String} user\n * @param {String} pass\n * @return {Request} for chaining\n * @api public\n */\n\n\nRequest.prototype.auth = function (user, pass) {\n  var str = btoa(user + ':' + pass);\n  this.set('Authorization', 'Basic ' + str);\n  return this;\n};\n/**\n * Add query-string `val`.\n *\n * Examples:\n *\n *   request.get('/shoes')\n *     .query('size=10')\n *     .query({ color: 'blue' })\n *\n * @param {Object|String} val\n * @return {Request} for chaining\n * @api public\n */\n\n\nRequest.prototype.query = function (val) {\n  if ('string' != typeof val) val = serialize(val);\n  if (val) this._query.push(val);\n  return this;\n};\n/**\n * Write the field `name` and `val` for \"multipart/form-data\"\n * request bodies.\n *\n * ``` js\n * request.post('/upload')\n *   .field('foo', 'bar')\n *   .end(callback);\n * ```\n *\n * @param {String} name\n * @param {String|Blob|File} val\n * @return {Request} for chaining\n * @api public\n */\n\n\nRequest.prototype.field = function (name, val) {\n  if (!this._formData) this._formData = new root.FormData();\n\n  this._formData.append(name, val);\n\n  return this;\n};\n/**\n * Queue the given `file` as an attachment to the specified `field`,\n * with optional `filename`.\n *\n * ``` js\n * request.post('/upload')\n *   .attach(new Blob(['<a id=\"a\"><b id=\"b\">hey!</b></a>'], { type: \"text/html\"}))\n *   .end(callback);\n * ```\n *\n * @param {String} field\n * @param {Blob|File} file\n * @param {String} filename\n * @return {Request} for chaining\n * @api public\n */\n\n\nRequest.prototype.attach = function (field, file, filename) {\n  if (!this._formData) this._formData = new root.FormData();\n\n  this._formData.append(field, file, filename);\n\n  return this;\n};\n/**\n * Send `data`, defaulting the `.type()` to \"json\" when\n * an object is given.\n *\n * Examples:\n *\n *       // querystring\n *       request.get('/search')\n *         .end(callback)\n *\n *       // multiple data \"writes\"\n *       request.get('/search')\n *         .send({ search: 'query' })\n *         .send({ range: '1..5' })\n *         .send({ order: 'desc' })\n *         .end(callback)\n *\n *       // manual json\n *       request.post('/user')\n *         .type('json')\n *         .send('{\"name\":\"tj\"})\n *         .end(callback)\n *\n *       // auto json\n *       request.post('/user')\n *         .send({ name: 'tj' })\n *         .end(callback)\n *\n *       // manual x-www-form-urlencoded\n *       request.post('/user')\n *         .type('form')\n *         .send('name=tj')\n *         .end(callback)\n *\n *       // auto x-www-form-urlencoded\n *       request.post('/user')\n *         .type('form')\n *         .send({ name: 'tj' })\n *         .end(callback)\n *\n *       // defaults to x-www-form-urlencoded\n *      request.post('/user')\n *        .send('name=tobi')\n *        .send('species=ferret')\n *        .end(callback)\n *\n * @param {String|Object} data\n * @return {Request} for chaining\n * @api public\n */\n\n\nRequest.prototype.send = function (data) {\n  var obj = isObject(data);\n  var type = this.getHeader('Content-Type'); // merge\n\n  if (obj && isObject(this._data)) {\n    for (var key in data) {\n      this._data[key] = data[key];\n    }\n  } else if ('string' == typeof data) {\n    if (!type) this.type('form');\n    type = this.getHeader('Content-Type');\n\n    if ('application/x-www-form-urlencoded' == type) {\n      this._data = this._data ? this._data + '&' + data : data;\n    } else {\n      this._data = (this._data || '') + data;\n    }\n  } else {\n    this._data = data;\n  }\n\n  if (!obj) return this;\n  if (!type) this.type('json');\n  return this;\n};\n/**\n * Invoke the callback with `err` and `res`\n * and handle arity check.\n *\n * @param {Error} err\n * @param {Response} res\n * @api private\n */\n\n\nRequest.prototype.callback = function (err, res) {\n  var fn = this._callback;\n  this.clearTimeout();\n  fn(err, res);\n};\n/**\n * Invoke callback with x-domain error.\n *\n * @api private\n */\n\n\nRequest.prototype.crossDomainError = function () {\n  var err = new Error('Origin is not allowed by Access-Control-Allow-Origin');\n  err.crossDomain = true;\n  this.callback(err);\n};\n/**\n * Invoke callback with timeout error.\n *\n * @api private\n */\n\n\nRequest.prototype.timeoutError = function () {\n  var timeout = this._timeout;\n  var err = new Error('timeout of ' + timeout + 'ms exceeded');\n  err.timeout = timeout;\n  this.callback(err);\n};\n/**\n * Enable transmission of cookies with x-domain requests.\n *\n * Note that for this to work the origin must not be\n * using \"Access-Control-Allow-Origin\" with a wildcard,\n * and also must set \"Access-Control-Allow-Credentials\"\n * to \"true\".\n *\n * @api public\n */\n\n\nRequest.prototype.withCredentials = function () {\n  this._withCredentials = true;\n  return this;\n};\n/**\n * Initiate request, invoking callback `fn(res)`\n * with an instanceof `Response`.\n *\n * @param {Function} fn\n * @return {Request} for chaining\n * @api public\n */\n\n\nRequest.prototype.end = function (fn) {\n  var self = this;\n  var xhr = this.xhr = getXHR();\n\n  var query = this._query.join('&');\n\n  var timeout = this._timeout;\n  var data = this._formData || this._data; // store callback\n\n  this._callback = fn || noop; // state change\n\n  xhr.onreadystatechange = function () {\n    if (4 != xhr.readyState) return; // In IE9, reads to any property (e.g. status) off of an aborted XHR will\n    // result in the error \"Could not complete the operation due to error c00c023f\"\n\n    var status;\n\n    try {\n      status = xhr.status;\n    } catch (e) {\n      status = 0;\n    }\n\n    if (0 == status) {\n      if (self.aborted) return self.timeoutError();\n      return self.crossDomainError();\n    }\n\n    self.emit('end');\n  }; // progress\n\n\n  try {\n    if (xhr.upload) {\n      xhr.upload.onprogress = function (e) {\n        e.percent = e.loaded / e.total * 100;\n        self.emit('progress', e);\n      };\n    }\n  } catch (e) {// Accessing xhr.upload fails in IE from a web worker, so just pretend it doesn't exist.\n    // Reported here:\n    // https://connect.microsoft.com/IE/feedback/details/837245/xmlhttprequest-upload-throws-invalid-argument-when-used-from-web-worker-context\n  } // timeout\n\n\n  if (timeout && !this._timer) {\n    this._timer = setTimeout(function () {\n      self.abort();\n    }, timeout);\n  } // querystring\n\n\n  if (query) {\n    query = request.serializeObject(query);\n    this.url += ~this.url.indexOf('?') ? '&' + query : '?' + query;\n  } // initiate request\n\n\n  xhr.open(this.method, this.url, true); // CORS\n\n  if (this._withCredentials) xhr.withCredentials = true; // body\n\n  if ('GET' != this.method && 'HEAD' != this.method && 'string' != typeof data && !isHost(data)) {\n    // serialize stuff\n    var serialize = request.serialize[this.getHeader('Content-Type')];\n    if (serialize) data = serialize(data);\n  } // set header fields\n\n\n  for (var field in this.header) {\n    if (null == this.header[field]) continue;\n    xhr.setRequestHeader(field, this.header[field]);\n  } // send stuff\n\n\n  this.emit('request', this);\n  xhr.send(data);\n  return this;\n};\n/**\n * Expose `Request`.\n */\n\n\nrequest.Request = Request;\n/**\n * Issue a request:\n *\n * Examples:\n *\n *    request('GET', '/users').end(callback)\n *    request('/users').end(callback)\n *    request('/users', callback)\n *\n * @param {String} method\n * @param {String|Function} url or callback\n * @return {Request}\n * @api public\n */\n\nfunction request(method, url) {\n  // callback\n  if ('function' == typeof url) {\n    return new Request('GET', method).end(url);\n  } // url first\n\n\n  if (1 == arguments.length) {\n    return new Request('GET', method);\n  }\n\n  return new Request(method, url);\n}\n/**\n * GET `url` with optional callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} data or fn\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\n\nrequest.get = function (url, data, fn) {\n  var req = request('GET', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.query(data);\n  if (fn) req.end(fn);\n  return req;\n};\n/**\n * HEAD `url` with optional callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} data or fn\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\n\nrequest.head = function (url, data, fn) {\n  var req = request('HEAD', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n/**\n * DELETE `url` with optional callback `fn(res)`.\n *\n * @param {String} url\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\n\nrequest.del = function (url, fn) {\n  var req = request('DELETE', url);\n  if (fn) req.end(fn);\n  return req;\n};\n/**\n * PATCH `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed} data\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\n\nrequest.patch = function (url, data, fn) {\n  var req = request('PATCH', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n/**\n * POST `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed} data\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\n\nrequest.post = function (url, data, fn) {\n  var req = request('POST', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n/**\n * PUT `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} data or fn\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\n\nrequest.put = function (url, data, fn) {\n  var req = request('PUT', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n/**\n * Expose `request`.\n */\n\n\nmodule.exports = request;","map":{"version":3,"sources":["C:/Users/Aleksander/Documents/Uczelnia/SPS/REACT/callendar/node_modules/react-ajax/src/request.js"],"names":["Emitter","require","reduce","root","window","noop","isHost","obj","str","toString","call","getXHR","XMLHttpRequest","location","protocol","ActiveXObject","e","trim","s","replace","isObject","Object","serialize","pairs","key","push","encodeURIComponent","join","request","serializeObject","parseString","split","parts","pair","i","len","length","decodeURIComponent","types","html","json","xml","urlencoded","JSON","stringify","parse","parseHeader","lines","fields","index","line","field","val","pop","indexOf","slice","toLowerCase","type","shift","params","Response","req","options","xhr","text","method","responseText","setStatusProperties","status","header","headers","getAllResponseHeaders","getResponseHeader","setHeaderProperties","body","parseBody","prototype","get","ct","statusType","info","ok","clientError","serverError","error","toError","accepted","noContent","badRequest","unauthorized","notAcceptable","notFound","forbidden","url","msg","err","Error","Request","self","_query","_header","on","res","original","emit","callback","use","fn","timeout","ms","_timeout","clearTimeout","_timer","abort","aborted","set","unset","getHeader","accept","auth","user","pass","btoa","query","name","_formData","FormData","append","attach","file","filename","send","data","_data","_callback","crossDomainError","crossDomain","timeoutError","withCredentials","_withCredentials","end","onreadystatechange","readyState","upload","onprogress","percent","loaded","total","setTimeout","open","setRequestHeader","arguments","head","del","patch","post","put","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2014 TJ Holowaychuk <tj@vision-media.ca>\n */\n\n/**\n * Module dependencies.\n */\n\nvar Emitter = require('./emitter');\nvar reduce = require('./reduce');\n\n/**\n * Root reference for iframes.\n */\n\nvar root = 'undefined' == typeof window\n    ? this\n    : window;\n\n/**\n * Noop.\n */\n\nfunction noop(){};\n\n/**\n * Check if `obj` is a host object,\n * we don't want to serialize these :)\n *\n * TODO: future proof, move to compoent land\n *\n * @param {Object} obj\n * @return {Boolean}\n * @api private\n */\n\nfunction isHost(obj) {\n    var str = {}.toString.call(obj);\n\n    switch (str) {\n        case '[object File]':\n        case '[object Blob]':\n        case '[object FormData]':\n            return true;\n        default:\n            return false;\n    }\n}\n\n/**\n * Determine XHR.\n */\n\nfunction getXHR() {\n    if (root.XMLHttpRequest\n        && ('file:' != root.location.protocol || !root.ActiveXObject)) {\n        return new XMLHttpRequest;\n    } else {\n        try { return new ActiveXObject('Microsoft.XMLHTTP'); } catch(e) {}\n        try { return new ActiveXObject('Msxml2.XMLHTTP.6.0'); } catch(e) {}\n        try { return new ActiveXObject('Msxml2.XMLHTTP.3.0'); } catch(e) {}\n        try { return new ActiveXObject('Msxml2.XMLHTTP'); } catch(e) {}\n    }\n    return false;\n}\n\n/**\n * Removes leading and trailing whitespace, added to support IE.\n *\n * @param {String} s\n * @return {String}\n * @api private\n */\n\nvar trim = ''.trim\n    ? function(s) { return s.trim(); }\n    : function(s) { return s.replace(/(^\\s*|\\s*$)/g, ''); };\n\n/**\n * Check if `obj` is an object.\n *\n * @param {Object} obj\n * @return {Boolean}\n * @api private\n */\n\nfunction isObject(obj) {\n    return obj === Object(obj);\n}\n\n/**\n * Serialize the given `obj`.\n *\n * @param {Object} obj\n * @return {String}\n * @api private\n */\n\nfunction serialize(obj) {\n    if (!isObject(obj)) return obj;\n    var pairs = [];\n    for (var key in obj) {\n        if (null != obj[key]) {\n            pairs.push(encodeURIComponent(key)\n                + '=' + encodeURIComponent(obj[key]));\n        }\n    }\n    return pairs.join('&');\n}\n\n/**\n * Expose serialization method.\n */\n\nrequest.serializeObject = serialize;\n\n/**\n * Parse the given x-www-form-urlencoded `str`.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nfunction parseString(str) {\n    var obj = {};\n    var pairs = str.split('&');\n    var parts;\n    var pair;\n\n    for (var i = 0, len = pairs.length; i < len; ++i) {\n        pair = pairs[i];\n        parts = pair.split('=');\n        obj[decodeURIComponent(parts[0])] = decodeURIComponent(parts[1]);\n    }\n\n    return obj;\n}\n\n/**\n * Expose parser.\n */\n\nrequest.parseString = parseString;\n\n/**\n * Default MIME type map.\n *\n *     superagent.types.xml = 'application/xml';\n *\n */\n\nrequest.types = {\n    html: 'text/html',\n    json: 'application/json',\n    xml: 'application/xml',\n    urlencoded: 'application/x-www-form-urlencoded',\n    'form': 'application/x-www-form-urlencoded',\n    'form-data': 'application/x-www-form-urlencoded'\n};\n\n/**\n * Default serialization map.\n *\n *     superagent.serialize['application/xml'] = function(obj){\n *       return 'generated xml here';\n *     };\n *\n */\n\nrequest.serialize = {\n    'application/x-www-form-urlencoded': serialize,\n    'application/json': JSON.stringify\n};\n\n/**\n * Default parsers.\n *\n *     superagent.parse['application/xml'] = function(str){\n  *       return { object parsed from str };\n  *     };\n *\n */\n\nrequest.parse = {\n    'application/x-www-form-urlencoded': parseString,\n    'application/json': JSON.parse\n};\n\n/**\n * Parse the given header `str` into\n * an object containing the mapped fields.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nfunction parseHeader(str) {\n    var lines = str.split(/\\r?\\n/);\n    var fields = {};\n    var index;\n    var line;\n    var field;\n    var val;\n\n    lines.pop(); // trailing CRLF\n\n    for (var i = 0, len = lines.length; i < len; ++i) {\n        line = lines[i];\n        index = line.indexOf(':');\n        field = line.slice(0, index).toLowerCase();\n        val = trim(line.slice(index + 1));\n        fields[field] = val;\n    }\n\n    return fields;\n}\n\n/**\n * Return the mime type for the given `str`.\n *\n * @param {String} str\n * @return {String}\n * @api private\n */\n\nfunction type(str){\n    return str.split(/ *; */).shift();\n};\n\n/**\n * Return header field parameters.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nfunction params(str){\n    return reduce(str.split(/ *; */), function(obj, str){\n        var parts = str.split(/ *= */)\n            , key = parts.shift()\n            , val = parts.shift();\n\n        if (key && val) obj[key] = val;\n        return obj;\n    }, {});\n};\n\n/**\n * Initialize a new `Response` with the given `xhr`.\n *\n *  - set flags (.ok, .error, etc)\n *  - parse header\n *\n * Examples:\n *\n *  Aliasing `superagent` as `request` is nice:\n *\n *      request = superagent;\n *\n *  We can use the promise-like API, or pass callbacks:\n *\n *      request.get('/').end(function(res){});\n *      request.get('/', function(res){});\n *\n *  Sending data can be chained:\n *\n *      request\n *        .post('/user')\n *        .send({ name: 'tj' })\n *        .end(function(res){});\n *\n *  Or passed to `.send()`:\n *\n *      request\n *        .post('/user')\n *        .send({ name: 'tj' }, function(res){});\n *\n *  Or passed to `.post()`:\n *\n *      request\n *        .post('/user', { name: 'tj' })\n *        .end(function(res){});\n *\n * Or further reduced to a single call for simple cases:\n *\n *      request\n *        .post('/user', { name: 'tj' }, function(res){});\n *\n * @param {XMLHTTPRequest} xhr\n * @param {Object} options\n * @api private\n */\n\nfunction Response(req, options) {\n    options = options || {};\n    this.req = req;\n    this.xhr = this.req.xhr;\n    this.text = this.req.method !='HEAD'\n        ? this.xhr.responseText\n        : null;\n    this.setStatusProperties(this.xhr.status);\n    this.header = this.headers = parseHeader(this.xhr.getAllResponseHeaders());\n    // getAllResponseHeaders sometimes falsely returns \"\" for CORS requests, but\n    // getResponseHeader still works. so we get content-type even if getting\n    // other headers fails.\n    this.header['content-type'] = this.xhr.getResponseHeader('content-type');\n    this.setHeaderProperties(this.header);\n    this.body = this.req.method != 'HEAD'\n        ? this.parseBody(this.text)\n        : null;\n}\n\n/**\n * Get case-insensitive `field` value.\n *\n * @param {String} field\n * @return {String}\n * @api public\n */\n\nResponse.prototype.get = function(field){\n    return this.header[field.toLowerCase()];\n};\n\n/**\n * Set header related properties:\n *\n *   - `.type` the content type without params\n *\n * A response of \"Content-Type: text/plain; charset=utf-8\"\n * will provide you with a `.type` of \"text/plain\".\n *\n * @param {Object} header\n * @api private\n */\n\nResponse.prototype.setHeaderProperties = function(header){\n    // content-type\n    var ct = this.header['content-type'] || '';\n    this.type = type(ct);\n\n    // params\n    var obj = params(ct);\n    for (var key in obj) this[key] = obj[key];\n};\n\n/**\n * Parse the given body `str`.\n *\n * Used for auto-parsing of bodies. Parsers\n * are defined on the `superagent.parse` object.\n *\n * @param {String} str\n * @return {Mixed}\n * @api private\n */\n\nResponse.prototype.parseBody = function(str){\n    var parse = request.parse[this.type];\n    return parse && str && str.length\n        ? parse(str)\n        : null;\n};\n\n/**\n * Set flags such as `.ok` based on `status`.\n *\n * For example a 2xx response will give you a `.ok` of __true__\n * whereas 5xx will be __false__ and `.error` will be __true__. The\n * `.clientError` and `.serverError` are also available to be more\n * specific, and `.statusType` is the class of error ranging from 1..5\n * sometimes useful for mapping respond colors etc.\n *\n * \"sugar\" properties are also defined for common cases. Currently providing:\n *\n *   - .noContent\n *   - .badRequest\n *   - .unauthorized\n *   - .notAcceptable\n *   - .notFound\n *\n * @param {Number} status\n * @api private\n */\n\nResponse.prototype.setStatusProperties = function(status){\n    var type = status / 100 | 0;\n\n    // status / class\n    this.status = status;\n    this.statusType = type;\n\n    // basics\n    this.info = 1 == type;\n    this.ok = 2 == type;\n    this.clientError = 4 == type;\n    this.serverError = 5 == type;\n    this.error = (4 == type || 5 == type)\n        ? this.toError()\n        : false;\n\n    // sugar\n    this.accepted = 202 == status;\n    this.noContent = 204 == status || 1223 == status;\n    this.badRequest = 400 == status;\n    this.unauthorized = 401 == status;\n    this.notAcceptable = 406 == status;\n    this.notFound = 404 == status;\n    this.forbidden = 403 == status;\n};\n\n/**\n * Return an `Error` representative of this response.\n *\n * @return {Error}\n * @api public\n */\n\nResponse.prototype.toError = function(){\n    var req = this.req;\n    var method = req.method;\n    var url = req.url;\n\n    var msg = 'cannot ' + method + ' ' + url + ' (' + this.status + ')';\n    var err = new Error(msg);\n    err.status = this.status;\n    err.method = method;\n    err.url = url;\n\n    return err;\n};\n\n/**\n * Expose `Response`.\n */\n\nrequest.Response = Response;\n\n/**\n * Initialize a new `Request` with the given `method` and `url`.\n *\n * @param {String} method\n * @param {String} url\n * @api public\n */\n\nfunction Request(method, url) {\n    var self = this;\n    Emitter.call(this);\n    this._query = this._query || [];\n    this.method = method;\n    this.url = url;\n    this.header = {};\n    this._header = {};\n    this.on('end', function(){\n        var err = null;\n        var res = null;\n\n        try {\n            res = new Response(self);\n        } catch(e) {\n            err = new Error('Parser is unable to parse the response');\n            err.parse = true;\n            err.original = e;\n        }\n\n        if (res) {\n            self.emit('response', res);\n        }\n\n        self.callback(err, res);\n    });\n}\n\n/**\n * Mixin `Emitter`.\n */\n\nEmitter(Request.prototype);\n\n/**\n * Allow for extension\n */\n\nRequest.prototype.use = function(fn) {\n    fn(this);\n    return this;\n}\n\n/**\n * Set timeout to `ms`.\n *\n * @param {Number} ms\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.timeout = function(ms){\n    this._timeout = ms;\n    return this;\n};\n\n/**\n * Clear previous timeout.\n *\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.clearTimeout = function(){\n    this._timeout = 0;\n    clearTimeout(this._timer);\n    return this;\n};\n\n/**\n * Abort the request, and clear potential timeout.\n *\n * @return {Request}\n * @api public\n */\n\nRequest.prototype.abort = function(){\n    if (this.aborted) return;\n    this.aborted = true;\n    this.xhr.abort();\n    this.clearTimeout();\n    this.emit('abort');\n    return this;\n};\n\n/**\n * Set header `field` to `val`, or multiple fields with one object.\n *\n * Examples:\n *\n *      req.get('/')\n *        .set('Accept', 'application/json')\n *        .set('X-API-Key', 'foobar')\n *        .end(callback);\n *\n *      req.get('/')\n *        .set({ Accept: 'application/json', 'X-API-Key': 'foobar' })\n *        .end(callback);\n *\n * @param {String|Object} field\n * @param {String} val\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.set = function(field, val){\n    if (isObject(field)) {\n        for (var key in field) {\n            this.set(key, field[key]);\n        }\n        return this;\n    }\n    this._header[field.toLowerCase()] = val;\n    this.header[field] = val;\n    return this;\n};\n\n/**\n * Remove header `field`.\n *\n * Example:\n *\n *      req.get('/')\n *        .unset('User-Agent')\n *        .end(callback);\n *\n * @param {String} field\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.unset = function(field){\n    delete this._header[field.toLowerCase()];\n    delete this.header[field];\n    return this;\n};\n\n/**\n * Get case-insensitive header `field` value.\n *\n * @param {String} field\n * @return {String}\n * @api private\n */\n\nRequest.prototype.getHeader = function(field){\n    return this._header[field.toLowerCase()];\n};\n\n/**\n * Set Content-Type to `type`, mapping values from `request.types`.\n *\n * Examples:\n *\n *      superagent.types.xml = 'application/xml';\n *\n *      request.post('/')\n *        .type('xml')\n *        .send(xmlstring)\n *        .end(callback);\n *\n *      request.post('/')\n *        .type('application/xml')\n *        .send(xmlstring)\n *        .end(callback);\n *\n * @param {String} type\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.type = function(type){\n    this.set('Content-Type', request.types[type] || type);\n    return this;\n};\n\n/**\n * Set Accept to `type`, mapping values from `request.types`.\n *\n * Examples:\n *\n *      superagent.types.json = 'application/json';\n *\n *      request.get('/agent')\n *        .accept('json')\n *        .end(callback);\n *\n *      request.get('/agent')\n *        .accept('application/json')\n *        .end(callback);\n *\n * @param {String} accept\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.accept = function(type){\n    this.set('Accept', request.types[type] || type);\n    return this;\n};\n\n/**\n * Set Authorization field value with `user` and `pass`.\n *\n * @param {String} user\n * @param {String} pass\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.auth = function(user, pass){\n    var str = btoa(user + ':' + pass);\n    this.set('Authorization', 'Basic ' + str);\n    return this;\n};\n\n/**\n * Add query-string `val`.\n *\n * Examples:\n *\n *   request.get('/shoes')\n *     .query('size=10')\n *     .query({ color: 'blue' })\n *\n * @param {Object|String} val\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.query = function(val){\n    if ('string' != typeof val) val = serialize(val);\n    if (val) this._query.push(val);\n    return this;\n};\n\n/**\n * Write the field `name` and `val` for \"multipart/form-data\"\n * request bodies.\n *\n * ``` js\n * request.post('/upload')\n *   .field('foo', 'bar')\n *   .end(callback);\n * ```\n *\n * @param {String} name\n * @param {String|Blob|File} val\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.field = function(name, val){\n    if (!this._formData) this._formData = new root.FormData();\n    this._formData.append(name, val);\n    return this;\n};\n\n/**\n * Queue the given `file` as an attachment to the specified `field`,\n * with optional `filename`.\n *\n * ``` js\n * request.post('/upload')\n *   .attach(new Blob(['<a id=\"a\"><b id=\"b\">hey!</b></a>'], { type: \"text/html\"}))\n *   .end(callback);\n * ```\n *\n * @param {String} field\n * @param {Blob|File} file\n * @param {String} filename\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.attach = function(field, file, filename){\n    if (!this._formData) this._formData = new root.FormData();\n    this._formData.append(field, file, filename);\n    return this;\n};\n\n/**\n * Send `data`, defaulting the `.type()` to \"json\" when\n * an object is given.\n *\n * Examples:\n *\n *       // querystring\n *       request.get('/search')\n *         .end(callback)\n *\n *       // multiple data \"writes\"\n *       request.get('/search')\n *         .send({ search: 'query' })\n *         .send({ range: '1..5' })\n *         .send({ order: 'desc' })\n *         .end(callback)\n *\n *       // manual json\n *       request.post('/user')\n *         .type('json')\n *         .send('{\"name\":\"tj\"})\n *         .end(callback)\n *\n *       // auto json\n *       request.post('/user')\n *         .send({ name: 'tj' })\n *         .end(callback)\n *\n *       // manual x-www-form-urlencoded\n *       request.post('/user')\n *         .type('form')\n *         .send('name=tj')\n *         .end(callback)\n *\n *       // auto x-www-form-urlencoded\n *       request.post('/user')\n *         .type('form')\n *         .send({ name: 'tj' })\n *         .end(callback)\n *\n *       // defaults to x-www-form-urlencoded\n *      request.post('/user')\n *        .send('name=tobi')\n *        .send('species=ferret')\n *        .end(callback)\n *\n * @param {String|Object} data\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.send = function(data){\n    var obj = isObject(data);\n    var type = this.getHeader('Content-Type');\n\n    // merge\n    if (obj && isObject(this._data)) {\n        for (var key in data) {\n            this._data[key] = data[key];\n        }\n    } else if ('string' == typeof data) {\n        if (!type) this.type('form');\n        type = this.getHeader('Content-Type');\n        if ('application/x-www-form-urlencoded' == type) {\n            this._data = this._data\n                ? this._data + '&' + data\n                : data;\n        } else {\n            this._data = (this._data || '') + data;\n        }\n    } else {\n        this._data = data;\n    }\n\n    if (!obj) return this;\n    if (!type) this.type('json');\n    return this;\n};\n\n/**\n * Invoke the callback with `err` and `res`\n * and handle arity check.\n *\n * @param {Error} err\n * @param {Response} res\n * @api private\n */\n\nRequest.prototype.callback = function(err, res){\n    var fn = this._callback;\n    this.clearTimeout();\n    fn(err, res);\n};\n\n/**\n * Invoke callback with x-domain error.\n *\n * @api private\n */\n\nRequest.prototype.crossDomainError = function(){\n    var err = new Error('Origin is not allowed by Access-Control-Allow-Origin');\n    err.crossDomain = true;\n    this.callback(err);\n};\n\n/**\n * Invoke callback with timeout error.\n *\n * @api private\n */\n\nRequest.prototype.timeoutError = function(){\n    var timeout = this._timeout;\n    var err = new Error('timeout of ' + timeout + 'ms exceeded');\n    err.timeout = timeout;\n    this.callback(err);\n};\n\n/**\n * Enable transmission of cookies with x-domain requests.\n *\n * Note that for this to work the origin must not be\n * using \"Access-Control-Allow-Origin\" with a wildcard,\n * and also must set \"Access-Control-Allow-Credentials\"\n * to \"true\".\n *\n * @api public\n */\n\nRequest.prototype.withCredentials = function(){\n    this._withCredentials = true;\n    return this;\n};\n\n/**\n * Initiate request, invoking callback `fn(res)`\n * with an instanceof `Response`.\n *\n * @param {Function} fn\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.end = function(fn){\n    var self = this;\n    var xhr = this.xhr = getXHR();\n    var query = this._query.join('&');\n    var timeout = this._timeout;\n    var data = this._formData || this._data;\n\n    // store callback\n    this._callback = fn || noop;\n\n    // state change\n    xhr.onreadystatechange = function(){\n        if (4 != xhr.readyState) return;\n\n        // In IE9, reads to any property (e.g. status) off of an aborted XHR will\n        // result in the error \"Could not complete the operation due to error c00c023f\"\n        var status;\n        try { status = xhr.status } catch(e) { status = 0; }\n\n        if (0 == status) {\n            if (self.aborted) return self.timeoutError();\n            return self.crossDomainError();\n        }\n        self.emit('end');\n    };\n\n    // progress\n    try {\n        if (xhr.upload) {\n            xhr.upload.onprogress = function(e){\n                e.percent = e.loaded / e.total * 100;\n                self.emit('progress', e);\n            };\n        }\n    } catch(e) {\n        // Accessing xhr.upload fails in IE from a web worker, so just pretend it doesn't exist.\n        // Reported here:\n        // https://connect.microsoft.com/IE/feedback/details/837245/xmlhttprequest-upload-throws-invalid-argument-when-used-from-web-worker-context\n    }\n\n    // timeout\n    if (timeout && !this._timer) {\n        this._timer = setTimeout(function(){\n            self.abort();\n        }, timeout);\n    }\n\n    // querystring\n    if (query) {\n        query = request.serializeObject(query);\n        this.url += ~this.url.indexOf('?')\n            ? '&' + query\n            : '?' + query;\n    }\n\n    // initiate request\n    xhr.open(this.method, this.url, true);\n\n    // CORS\n    if (this._withCredentials) xhr.withCredentials = true;\n\n    // body\n    if ('GET' != this.method && 'HEAD' != this.method && 'string' != typeof data && !isHost(data)) {\n        // serialize stuff\n        var serialize = request.serialize[this.getHeader('Content-Type')];\n        if (serialize) data = serialize(data);\n    }\n\n    // set header fields\n    for (var field in this.header) {\n        if (null == this.header[field]) continue;\n        xhr.setRequestHeader(field, this.header[field]);\n    }\n\n    // send stuff\n    this.emit('request', this);\n    xhr.send(data);\n    return this;\n};\n\n/**\n * Expose `Request`.\n */\n\nrequest.Request = Request;\n\n/**\n * Issue a request:\n *\n * Examples:\n *\n *    request('GET', '/users').end(callback)\n *    request('/users').end(callback)\n *    request('/users', callback)\n *\n * @param {String} method\n * @param {String|Function} url or callback\n * @return {Request}\n * @api public\n */\n\nfunction request(method, url) {\n    // callback\n    if ('function' == typeof url) {\n        return new Request('GET', method).end(url);\n    }\n\n    // url first\n    if (1 == arguments.length) {\n        return new Request('GET', method);\n    }\n\n    return new Request(method, url);\n}\n\n/**\n * GET `url` with optional callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} data or fn\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\nrequest.get = function(url, data, fn){\n    var req = request('GET', url);\n    if ('function' == typeof data) fn = data, data = null;\n    if (data) req.query(data);\n    if (fn) req.end(fn);\n    return req;\n};\n\n/**\n * HEAD `url` with optional callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} data or fn\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\nrequest.head = function(url, data, fn){\n    var req = request('HEAD', url);\n    if ('function' == typeof data) fn = data, data = null;\n    if (data) req.send(data);\n    if (fn) req.end(fn);\n    return req;\n};\n\n/**\n * DELETE `url` with optional callback `fn(res)`.\n *\n * @param {String} url\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\nrequest.del = function(url, fn){\n    var req = request('DELETE', url);\n    if (fn) req.end(fn);\n    return req;\n};\n\n/**\n * PATCH `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed} data\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\nrequest.patch = function(url, data, fn){\n    var req = request('PATCH', url);\n    if ('function' == typeof data) fn = data, data = null;\n    if (data) req.send(data);\n    if (fn) req.end(fn);\n    return req;\n};\n\n/**\n * POST `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed} data\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\nrequest.post = function(url, data, fn){\n    var req = request('POST', url);\n    if ('function' == typeof data) fn = data, data = null;\n    if (data) req.send(data);\n    if (fn) req.end(fn);\n    return req;\n};\n\n/**\n * PUT `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} data or fn\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\nrequest.put = function(url, data, fn){\n    var req = request('PUT', url);\n    if ('function' == typeof data) fn = data, data = null;\n    if (data) req.send(data);\n    if (fn) req.end(fn);\n    return req;\n};\n\n/**\n * Expose `request`.\n */\n\nmodule.exports = request;"]},"metadata":{},"sourceType":"script"}